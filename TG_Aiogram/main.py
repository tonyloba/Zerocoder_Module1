import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher,F, types
from aiogram.filters.command import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, FSInputFile,KeyboardButton
from deep_translator import GoogleTranslator
from gtts import gTTS
import os
import random
import keyboard as kb


from config import TOKEN, WEATHER_API_KEY
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

CITY = "Moscow"
URL = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'Hi {message.from_user.first_name}! I am a bot!',reply_markup=kb.main_keyboard)
    # Inline Buttons :
    # await message.answer(f'Hi {message.from_user.first_name}! I am a bot!',reply_markup=kb.inline_keyboard)
    # Keyboard Builder
    # await message.answer(f'Hi {message.from_user.first_name}! I am a bot!',reply_markup=kb.test_keyboard())

@dp.message(Command('help'))
async def help(message: Message):
    await message.answer(
        "This Bot can do :\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/echo - –ø–æ–≤—Ç–æ—Ä\n"
        "/photo - —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ\n"
        "/weather [–≥–æ—Ä–æ–¥] - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    )

@dp.message(F.text == 'What is your name?')
async def text_answer(message: Message):
    await message.answer('WALL-E (Waste Allocation Load Lifter Earth-Class) , the last functioning robot on a garbage-covered Earth')

@dp.message(F.photo)
async def photo_answer(message: Message):
    list = ['Wow, what a picture!','Not Bad!','Dont send me this!','What should I do with that?']
    rand_ans = random.choice(list)
    await message.answer(rand_ans)
    await bot.download(message.photo[-1], destination=f'img/{message.photo[-1].file_id}.jpg')

@dp.message(Command('photo'))
async def photo_random(message: Message):
    list = ['https://www.freepik.com/free-photo/grey-kitty-with-monochrome-wall-her_13863400.htm#fromView=keyword&page=1&position=3&uuid=7ffedd04-878b-4649-89b2-61a5280cdcf1&query=Cat','https://www.freepik.com/free-vector/cat-paws-icon-collection_8270958.htm#fromView=keyword&page=1&position=6&uuid=7ffedd04-878b-4649-89b2-61a5280cdcf1&query=Cat']
    rand_photo = random.choice(list)
    await message.answer_photo(photo= rand_photo, caption='Random photo')

@dp.message(Command('video'))
async def video(message: Message):
    await bot.send_video(message.chat.id, 'uploading video')
    myvideo = FSInputFile('Countdown1.mp4')
    # await message.answer_video(video=myvideo)
    await bot.send_video(message.chat.id, video=myvideo)

@dp.message(Command('audio'))
async def audio(message: Message):
    await bot.send_audio(message.chat.id, 'uploading audio')
    myaudio = FSInputFile('laser_shoot.wav')
    await bot.send_audio(message.chat.id, audio=myaudio)

@dp.message(Command('voice'))
async def voice(message: Message):
    voice = FSInputFile('laser_shoot.wav')
    await message.answer_voice(voice=voice)
    # await bot.send_voice(message.chat.id, 'uploading voice')

@dp.message(Command('training'))
async def training(message: Message):
   training_list = [
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –í–µ–ª–æ—Å–∏–ø–µ–¥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2:\\n1. –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞)",
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n3. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)"
   ]
   rand_tr = random.choice(training_list)
   await message.answer(f"–≠—Ç–æ –≤–∞—à–∞ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {rand_tr}")

   tts = gTTS(text=rand_tr, lang='ru')
   tts.save("training.ogg")
   voice = FSInputFile('training.ogg')
   # await message.answer_voice(voice=voice)
   # await bot.send_audio(message.chat.id, voice)
   await bot.send_voice(message.chat.id, voice)

   os.remove('training.ogg')

@dp.message(Command('doc'))
async def doc(message: Message):
    mydoc = FSInputFile("ZZZ.txt")
    await bot.send_document(message.chat.id,mydoc)



####### API Weather #######
@dp.message(Command('weather'))
async def weather(message: Message):
    args = message.text.split(maxsplit=1)

    if len(args) > 1:
        city = args[1]
    else:
        city = "Moscow"

    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                temp = data["main"]["temp"]
                description = data["weather"][0]["description"]
                await message.answer(
                    f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅ {description.capitalize()}"
                )
            else:
                # Print full error response for debugging
                error_text = await resp.text()
                await message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' üò¢\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {resp.status}\n–û—Ç–≤–µ—Ç: {error_text}"
                )
############################################################################

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_lang = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
    "–ù–µ–º–µ—Ü–∫–∏–π üá©üá™": "de",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π üá´üá∑": "fr",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π üá™üá∏": "es",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π üáÆüáπ": "it",
    "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru"   # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä—É—Å—Å–∫–æ–º—É
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    buttons = [[KeyboardButton(text=lang)] for lang in LANGUAGES.keys()]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@dp.message(Command('translate'))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_language_keyboard()
    )
@dp.message(lambda message: message.text in LANGUAGES.keys())
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = LANGUAGES[message.text]
    await message.answer(f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}")

@dp.message()
async def translate_message(message: types.Message):
    # Skip if the message is a command or language selection
    if message.text.startswith('/') or message.text in LANGUAGES:
        return
        
    lang = user_lang.get(message.from_user.id, "en")  # Default to English
    try:
        translated_text = GoogleTranslator(source="auto", target=lang).translate(message.text)
        await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ ({lang}):\n{translated_text}")
    except Exception as e:
        logging.exception(e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


############################################################################
@dp.message(Command('echo'))
async def echo(message: Message):
    await message.answer(message.text)

@dp.message()
async def my_echo(message: Message):
    await message.send_copy(chat_id=message.chat.id)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())