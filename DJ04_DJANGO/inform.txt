Создаем шаблон проекта через терминал, чтобы не создавать множество файлов вручную — всё создастся автоматически.
В терминале прописываем команду и название проекта:

django-admin startproject ZeroCoder



Первый файл — manage.py. Этот файл важен для нас, так как через него будет запускаться локальный сервер.

Также в папке находится пакет ZeroCoder, который содержит все файлы нашего проекта, в том числе init.py, который превращает эту папку в пакет. Этот файл обычно пустой, но он тоже важен для настроек проекта.
Файлы ASGI и WSGI нужны для настройки сервера,

 settings.py. Это файл с глобальными настройками проекта. Здесь прописан путь до проекта, секретный ключ и переменная DEBUG, которая может принимать значения True или False. True показывает все ошибки на странице, False скрывает их. False обычно ставят, когда выкладывают проект и другие люди могут заходить и пользоваться им.
 Во время разработки для переменной DEBUG можно оставить значение True.


файл urls.py. Он отвечает за маршрутизацию URL-адресов. По умолчанию здесь прописан путь admin/, который открывает панель администратора.
 По сути, здесь обрабатываются различными URL-адреса и здесь с ними можно работать.


 Запускаем локальный сервер. Для этого заходим в терминал. Сейчас мы находимся в папке WebDjproject, то есть, по сути, это главная папка всего нашего проекта. Нам же нужно зайти в папку ZeroCoder, потому что запускать локальный сервер мы будем через файл main.py.
 Переходим в папку ZeroCoder, для этого прописываем в терминале: cd ZeroCoder.
 Запускаем локальный сервер:
 python manage.py runserver


Создадим наше собственное приложение для обработки базовых страниц. Для этого мы снова работаем с терминалом. Снова заходим в папку ZeroCoder (прописываем cd ZeroCoder). Дальше, уже находясь в этой папке, прописываем следующую команду — python, при этом используем команду startapp, далее нужно дать название этому приложению — например, main:
 python manage.py startapp main


 После создания приложения в проекте появится папка main с необходимыми файлами. Разберемся с их содержимым:

migrations: папка для миграций, необходимых для работы с базами данных;
__init__.py: файл, который запускается при инициализации (запуске) пакета;
admin.py: здесь мы будем указывать, какие таблицы отображать в админ-панели;
apps.py: файл с настройками, но не общими, а для конкретного приложения main;
models.py: файл для создания моделей, на основе которых будут создаваться таблицы в базе данных;
tests.py: файл для написания каких-либо тестирований проекта;
views.py: файл для отображения HTML-шаблонов. При получении URL-адреса произойдет переход на какую-либо HTML-страницу.
Чтобы Django понял, что теперь в проекте есть приложение, его нужно зарегистрировать. Для этого заходим в файл settings.py и добавляем новое приложение в список INSTALLED_APPS:
 INSTALLED_APPS = [
    'main',
]



Про использование ссылок :

## 1. Что такое `{% url 'index' %}` и `{% url 'main:index' %}`?

- `{% url 'index' %}` — обращается к маршруту с именем `index`.
- `{% url 'main:index' %}` — обращается к маршруту с именем `index` внутри пространства имён (`namespace`) `main`.

---

## 2. Зачем нужен namespace (`main:`)?

### Без namespace:

- Если у вас только одно приложение, то имена маршрутов (`index`, `new`, `test`) вполне достаточно.
- Пример:
  ```python
  # main/urls.py
  urlpatterns = [
      path('', views.index, name='index'),  # Просто 'index'
  ]
  ```
  И в шаблоне:
  ```django
  {% url 'index' %}
  ```

### Когда нужен namespace:

- Если в проекте несколько приложений, **и** в каждом приложении могут быть одинаковые имена маршрутов!
- Например, у вас есть два приложения: `main` и `blog`, и в каждом есть маршрут с именем `index`.
- Как Django поймет, какой `index` вы имеете в виду?
- **Для этого и нужен namespace!**
  Вы объявляете в каждом приложении(main\urls.py)  свой `app_name`
  app_name = "main"

  и указываете namespace в шаблоне:
  - Для `main`: `{% url 'main:index' %}`
  - Для `blog`: `{% url 'blog:index' %}`


 ### Использование переменных context в :
views.py:
def index(request):
    #return HttpResponse("Hello, world. You're at the main index.")
    return render(request, "main/index.html" , context={'caption': 'Main Page Django'})

index.html:
  <h1>Welcome to the {{caption}}!</h1>